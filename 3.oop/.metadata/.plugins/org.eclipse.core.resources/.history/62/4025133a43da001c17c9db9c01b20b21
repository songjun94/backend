package dev.bank;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.Month;
import java.time.format.DateTimeFormatter;
import java.util.List;

import deb.Bank.domain.BankTransaction;
import dev.bank.data.BankStatementTSVParser;

public class BankStatementAnalyzer {
	
	// 입출금내역 파일인 back-data-simple.txt 파일의 경로 지정.
	private static final String RESOURCES = "src/main/resources/";

	public static void main(String[] args) throws IOException {
		// 1번째 기능 요구사항, 모든 거래내역(BankStatement)의 합 계산하기 / Phase1
	
		// 1. 파일 경로 확인 읽기
		final Path path = Paths.get(RESOURCES + "bank-data-simple.txt");
		final List<String> lines = Files.readAllLines(path);

		// 2. 읽어들인 파일 파싱
		final BankStatementTSVParser tsvParser = new BankStatementTSVParser();
		List<BankTransaction> bankTransactions = tsvParser.parseLinesFromTSV(lines);
		
		double total = 0d;
		for (String line : lines) {
			final String[] columns = line.split("\t");
			final double amount = Double.parseDouble(columns[1]);
			total += amount;
		}
		
		System.out.println("총 사용 금액은" + total + "입니다.");

		System.out.println("1월의 총 사용 금액은" + findTransactionsInJanuary() + "입니다");
	}
	// 총 입출금 내역 확인
	public static double calculateTotalAmount(List<BankTransaction> bankTransactions) {

		
		return total;
	}
	
	
	
	// 특정 달에는 몇 건의 입출금 내역이 발생하였는가?
	public static double findTransactionsInJanuary() throws IOException {
		final Path path = Paths.get(RESOURCES + "bank-data-simple.txt");
		final List<String> lines = Files.readAllLines(path);
		double total = 0d;

		final DateTimeFormatter DATE_PATTERN = DateTimeFormatter.ofPattern("dd-MM-yyyy");
		
		// 구현
		for (String line : lines) {
			final String[] columns = line.split("\t");
			final LocalDate date = LocalDate.parse(columns[0], DATE_PATTERN);
			
			if(date.getMonth() == Month.JANUARY) { //1월이면
				// java 11 Month
				final double amount = Double.parseDouble(columns[1]);
				total += amount;
				
			}
		}		
	
		return total;
	}
}
